p2_c0,p2_c1,p2_c2,p2_c3,p2_c4,p2_c5,p2_c6,p2_c7,
p1_wins,
p2_wins,
p1_general,p2_general,
#p1_spy,p2_spy,
p1_holds,p2_holds) %>%
mutate_all(~replace(., is.na(.), 0))
lin_reg_spec <- logistic_reg() %>%
set_mode("regression") %>%
set_engine("lm")
df_predictors <- allTurns %>%
filter(p1_spy==0, p2_spy==0) %>%
select(
p1_o0,p1_o1,p1_o2,p1_o3,p1_o4,p1_o5,p1_o6,p1_o7, #Outputs
p1_c0,p1_c1,p1_c2,p1_c3,p1_c4,p1_c5,p1_c6,p1_c7, #Inputs
p2_c0,p2_c1,p2_c2,p2_c3,p2_c4,p2_c5,p2_c6,p2_c7,
p1_wins,
p2_wins,
p1_general,p2_general,
#p1_spy,p2_spy,
p1_holds,p2_holds) %>%
mutate_all(~replace(., is.na(.), 0))
lin_reg_spec <- logistic_reg() %>%
set_mode("regression") %>%
set_engine("lm")
lin_reg_spec <- logistic_reg() %>%
@set_mode("regression") %>%
lin_reg_spec <- logistic_reg() %>%
#set_mode("regression") %>%
set_engine("lm")
df_predictors <- allTurns %>%
filter(p1_spy==0, p2_spy==0) %>%
select(
p1_o0,p1_o1,p1_o2,p1_o3,p1_o4,p1_o5,p1_o6,p1_o7, #Outputs
p1_c0,p1_c1,p1_c2,p1_c3,p1_c4,p1_c5,p1_c6,p1_c7, #Inputs
p2_c0,p2_c1,p2_c2,p2_c3,p2_c4,p2_c5,p2_c6,p2_c7,
p1_wins,
p2_wins,
p1_general,p2_general,
#p1_spy,p2_spy,
p1_holds,p2_holds) %>%
mutate_all(~replace(., is.na(.), 0))
lin_reg_spec <- logistic_reg() %>%
#set_mode("regression") %>%
set_engine("lm")
# Given that card X is in hand and you've been spied, how often is card X optimal to play?
# Split by turn of game
allTurns %>%
filter(p2_spy==1) %>%
group_by(turn) %>%
summarize(across(c("p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), ~mean(.x, na.rm=TRUE)))
allTurns %>%
filter(p2_spy==TRUE, turn==2)
spy_optimal_cards <- allTurns %>%
filter(p2_spy==TRUE) %>%
#select(p1_cards, p2_cards, "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7", "p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7") %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "optimal_prob") %>%
filter(optimal_prob==1) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6))) %>%
select(-optimal_prob) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "optimal_prob") %>%
filter(optimal_prob==1) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6))) %>%
select(-optimal_prob)
spy_optimal_cards %>%
filter(turn<=3) %>%
select(p1_cards, p2_cards,wins, generals, spies, holds, p1_card, p2_card)
library(rpart)
library(rpart.plot)
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = spy_optimal_cards)
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(spy_optimal_cards)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
rpart.plot(tree_fitted$fit)
tree_fitted
library(rpart)
library(rpart.plot)
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = spy_optimal_cards)
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(spy_optimal_cards)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
spy_optimal_cards <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(p1_optimal_prob==1) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(p2_optimal_prob==1) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0))
# This dataset looks card-by-card whether each card is viable in a particular gamestate.
# The idea is that if it's simple to tell which cards are viable, we can more easily figure out the play patterns that will work
spy_optimal_cards <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(p1_optimal_prob==1) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(p2_optimal_prob==1) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0))
spy_optimal_cards <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.null(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.null(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0)) %>%
```
spy_optimal_cards <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.null(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.null(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0)) %>%
```
spy_optimal_cards <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.null(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.null(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0))
card_viability <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.null(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.null(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0))
library(tidyverse)
library(tidyclust)
library(tclust)
library(tidymodels)
# Main data
allTurns <- read.csv("playableSolutions.txt", header = FALSE, sep = "|", col.names = c("gamestate", "value", ".s1","p1_optimal",".s2", "p2_optimal", ".m", "value_matrix")) %>%
mutate(gamestate = substr(gamestate,1, nchar(gamestate)-2)) %>% # Fixing error where extra characters ":v" are added to gamestate
mutate(gamestate_str = gamestate) %>% #Making a copy to be used as row labels
separate(gamestate, c(".1", "p1_cards", ".2", "p2_cards", ".3", "wins", ".4", "generals", ".5", "spies", ".6", "holds"), sep = "-")
library(tidyverse)
library(tidyclust)
library(tclust)
library(tidymodels)
# Main data
allTurns <- read.csv("playableSolutions.txt", header = FALSE, sep = "|", col.names = c("gamestate", "value", ".s1","p1_optimal",".s2", "p2_optimal", ".m", "value_matrix")) %>%
mutate(gamestate = substr(gamestate,1, nchar(gamestate)-2)) %>% # Fixing error where extra characters ":v" are added to gamestate
mutate(gamestate_str = gamestate) %>% #Making a copy to be used as row labels
separate(gamestate, c(".1", "p1_cards", ".2", "p2_cards", ".3", "wins", ".4", "generals", ".5", "spies", ".6", "holds"), sep = "-")
rownames(allTurns) <- allTurns$gamestate_str
allTurns <- allTurns %>%
separate(p1_optimal, paste("p1_o", 0:7, sep=''), sep=",", convert = TRUE) %>%
separate(p2_optimal, paste("p2_o", 0:7, sep=''), sep=",", convert = TRUE)
allTurns <- allTurns %>% select(-starts_with(".")) # get rid of temp columns starting with "."
allTurns <- allTurns %>% mutate(cards_left = nchar(p1_cards),
turn = 9-cards_left) %>%
mutate(p1_c0 = grepl("0",p1_cards),
p1_c1 = grepl("1",p1_cards),
p1_c2 = grepl("2",p1_cards),
p1_c3 = grepl("3",p1_cards),
p1_c4 = grepl("4",p1_cards),
p1_c5 = grepl("5",p1_cards),
p1_c6 = grepl("6",p1_cards),
p1_c7 = grepl("7",p1_cards),
p2_c0 = grepl("0",p2_cards),
p2_c1 = grepl("1",p2_cards),
p2_c2 = grepl("2",p2_cards),
p2_c3 = grepl("3",p2_cards),
p2_c4 = grepl("4",p2_cards),
p2_c5 = grepl("5",p2_cards),
p2_c6 = grepl("6",p2_cards),
p2_c7 = grepl("7",p2_cards),
p1_wins = as.numeric(substring(wins, 1,1)),
p2_wins = as.numeric(substring(wins, 2,2)),
p1_general = substring(generals, 1,1)==1,
p2_general = substring(generals, 2,2)==1,
p1_spy = substring(spies, 1,1)==1,
p2_spy = substring(spies,2,2)==1,
p1_holds = as.numeric(substring(holds,1,1)),
p2_holds = as.numeric(substring(holds,2,2))
)
# c("p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7")
# c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7")
allTurns %>%
filter(turn == 2) %>% filter(p1_c2==FALSE) %>%
head()
# A dataframe of just the optimal probabilities (0 for non-possibilities)
p1_optimal_turns <- allTurns %>%
#filter(turn <=5) %>%
filter(p1_spy == 0 && p2_spy == 0) %>%
select("p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7") %>%
mutate_all(~replace(., is.na(.), 0))
#braverats <- read.csv("BraveRatsData.csv")
source("readHumanData.r")
head(braverats_adjusted, 30)
library(rpart)
library(rpart.plot)
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = spy_optimal_cards)
spy_optimal_cards <- allTurns %>%
filter(p2_spy==TRUE) %>%
#select(p1_cards, p2_cards, "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7", "p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7") %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "optimal_prob") %>%
filter(optimal_prob==1) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6))) %>%
select(-optimal_prob) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "optimal_prob") %>%
filter(optimal_prob==1) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6))) %>%
select(-optimal_prob)
spy_optimal_cards %>%
filter(turn<=3) %>%
select(p1_cards, p2_cards,wins, generals, spies, holds, p1_card, p2_card)
library(rpart)
library(rpart.plot)
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = spy_optimal_cards)
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(spy_optimal_cards)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
# This dataset looks card-by-card whether each card is viable in a particular gamestate.
# The idea is that if it's simple to tell which cards are viable, we can more easily figure out the play patterns that will work
card_viability <- allTurns %>%
filter(p2_spy==FALSE) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.null(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.null(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0))
#
card_viability
card_viability <- allTurns %>%
filter(p2_spy==FALSE, turn <8) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.na(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,1,0)) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.na(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,1,0))
rm(reversed_column_names)
rm(braverats_flipped)
View(P1_Hand)
rm(P1_Hand)
rm(P2_Hand)
#
card_viability
card_viability %>% sample(10)
card_viability %>% sample_n(10)
card_of_interest = 0 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = spy_optimal_cards %>% filter(p1_card==card_of_interest))
card_of_interest = 0 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability %>% filter(p1_card==card_of_interest))
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability)
card_of_interest = 0 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability %>% filter(p1_card==card_of_interest))
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability)
# This dataset looks card-by-card whether each card is viable in a particular gamestate.
# The idea is that if it's simple to tell which cards are viable, we can more easily figure out the play patterns that will work
card_viability <- allTurns %>%
filter(p2_spy==FALSE, turn <8) %>%
# Extracting the optimal card for each player
pivot_longer(cols = c( "p1_o0","p1_o1","p1_o2","p1_o3","p1_o4","p1_o5","p1_o6","p1_o7"), names_to = "p1_card", values_to = "p1_optimal_prob") %>%
filter(!is.na(p1_optimal_prob)) %>%
mutate(p1_card=as.factor(substring(p1_card,5,6)),
p1_card_viable = ifelse(p1_optimal_prob>0,"viable","not viable")) %>%
pivot_longer(cols = c("p2_o0","p2_o1","p2_o2","p2_o3","p2_o4","p2_o5","p2_o6","p2_o7"), names_to = "p2_card", values_to = "p2_optimal_prob") %>%
filter(!is.na(p2_optimal_prob)) %>%
mutate(p2_card=as.factor(substring(p2_card,5,6)),
p2_card_viable = ifelse(p2_optimal_prob>0,"viable","not viable"))
card_viability %>% sample_n(10)
card_of_interest = 0 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability %>% filter(p1_card==card_of_interest))
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
card_of_interest = 7 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability %>% filter(p1_card==card_of_interest))
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
card_of_interest = 0 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability %>% filter(p1_card==card_of_interest))
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
card_of_interest = 1 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability %>% filter(p1_card==card_of_interest))
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability)
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
card_of_interest = 0 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability)
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability %>% filter(p1_card==card_of_interest))
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
card_of_interest = 1 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability)
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability %>% filter(p1_card==card_of_interest))
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
card_of_interest = 7 # Doing each card's tree 1 at a time
tree_mod <- decision_tree(mode = "classification", tree_depth = 4, cost_complexity = double(1)) %>%
set_engine("rpart") %>%
set_mode("classification")
spy_recipe = recipe(p1_card_viable ~ #p1_c0+p1_c1+p1_c2+p1_c3+p1_c4+p1_c5+p1_c6+p1_c7+ # All gamestate information
p2_c0+p2_c1+p2_c2+p2_c3+p2_c4+p2_c5+p2_c6+p2_c7+
p1_wins+
p2_wins+
p1_general+p2_general+
#p1_spy+p2_spy+
p1_holds+p2_holds, data = card_viability)
spy_wf = workflow() %>%
add_recipe(spy_recipe) %>%
add_model(tree_mod)
spy_fit <- spy_wf %>% fit(card_viability %>% filter(p1_card==card_of_interest))
tree_fitted <- spy_fit %>%
extract_fit_parsnip()
tree_fitted
rpart.plot(tree_fitted$fit)
